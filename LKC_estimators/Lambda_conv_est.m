function [ Lambda_est, convY, DconvY, xvals ] = Lambda_conv_est( lat_data, Kernel, resadd,...
                                                  enlarge )
% LAMBDA_CONV_EST( lat_data, Kernel, resadd, enlarge ) calculates an
% estimate of the induced Riemannian metric from a convolution field. It is
% known as the Lambda matrix in neuroimaging.
% This function uses the exact formula from taking the derivatives of the
% kernels and computing the corresponding convolutions.
%
%--------------------------------------------------------------------------
% ARGUMENTS
% Mandatory
%  lat_data  data array T_1 x ... x T_D x N. Last index enumerates the
%            samples. Note that N > 1 is required!
%  Kernel    either an object of class SepKernel or a numeric.
%            If class SepKernel all fields for first and second derivatives
%            must be specified.
%
%            If Kernel is numeric, the convolution field is generated by 
%            smoothing with an isotropic Gaussian kernel with FWHM = Kernel.
%            Truncation and adjust_kernel are set to be default values.
% Optional
%  resadd    the amount of voxels added equidistantly inbetween the
%            existing voxels. Default is 1.
%  enlarge   a numeric which must be a positive integer or zero. The
%            convolution field is computed on a domain enlarged in each
%            direction by 'enlarge' voxels. Note if resadd ~=0 the added
%            voxels are in high resolution. Default 0. 
%--------------------------------------------------------------------------
% OUTPUT
%   Lambda_est  an array of size hrT_1 x ... x hrT_D x D x D. Containing
%               the D x D Lambda matrix/Riemannian metric at each voxel
%               from the chosen increased resolution defined by resadd.
%   xvals       the grid values of the high resolution grid.
% -------------------------------------------------------------------------
% DEVELOPER TODOs:
%--------------------------------------------------------------------------
% EXAMPLES
% %1D
% rf   = noisegen( [35 35], 50, 6 );
% mask = ones([35 35);
% L = LKCestim_GaussConv( rf, 3, mask, 1 );
%
% %2D
% rf   = noisegen( [35 35], 50, 6 );
% mask = ones([35 35);
% L = LKCestim_GaussConv( rf, 3, mask, 1 );
% 
% %3D
%--------------------------------------------------------------------------
% AUTHOR: Fabian Telschow
%--------------------------------------------------------------------------


%% Check mandatory input and get important constants
%--------------------------------------------------------------------------

% Size of the domain
s_lat_data = size( lat_data );

% Dimension of the domain
D = length( s_lat_data( 1:end-1 ) );

% Get number of subjects/samples
nsubj = s_lat_data( D + 1 );

% Get variable domain counter
index  = repmat( {':'}, 1, D );

% Check that method is implemented for dimension D
if D > 3
    error( 'D must be < 4. Higher dimensional domains have not been implemented')
end

%% Add/check optional values
%--------------------------------------------------------------------------

if ~exist( 'resadd', 'var' )
   % Default number of resolution increasing voxels between observed voxels
   resadd = 1;
end

if ~exist( 'enlarge', 'var' )
   % Default number of resolution increasing voxels between observed voxels
   enlarge =  ceil( resadd / 2 );
end

%% Main function
%--------------------------------------------------------------------------

% Get the convolution fields and their derivatives
if isa( Kernel, 'SepKernel' ) || isnumeric( Kernel )
    [ convY, xvals ] = convfield( lat_data, Kernel, resadd, D, 0,...
                                         enlarge );
    DconvY = convfield( lat_data, Kernel, resadd, D, 1, enlarge );
else
    error( "The 'Kernel' must be either a numeric or a kernel structure!" )
end

% Get size of the resolution increased domain
sY = size( convY );

% Allocate output the entries of the Riemannian metric
Lambda_est = zeros( [ sY( 1:end-1 ) D D ] );

%%%%%% BEGIN compute the Riemannian metric
switch D
    case 1
        % Get the estimates of the variances and covariances required to
        % compute the Riemannian metric/Lambda matrix
        VY    = var( convY,  0, D+1 );
        VdxY  = var( DconvY, 0, D+1 );
        CYdxY = sum( ( DconvY - mean( DconvY, D+1 ) ) .* convY, D+1 ) ...
                                                            / ( nsubj - 1 );
        
        % Get the Riemannian metric at each point
        Lambda_est( index{:}, 1 ) = ( VdxY .* VY - CYdxY.^2 ) ./ VY.^2;
        
    case 2
        % Rename the partial derivatives of the convolution field
        convYx = squeeze( DconvY( index{:}, :, 1 ) );
        convYy = squeeze( DconvY( index{:}, :, 2 ) );
        clear DconvY
        
        % Get the estimates of the variances and covariances required to
        % compute the Riemannian metric/Lambda matrix
        VY   = var( convY,  0, D+1 ); 
        VdxY = var( convYx, 0, D+1 );
        VdyY = var( convYy, 0, D+1 );
        CdxYdyY = sum( ( convYy - mean( convYy, D+1 ) ) .* ...
                         convYx, D+1 ) / ( nsubj - 1 );
        CYdxY = sum( ( convYx - mean( convYx, D+1 ) ) .* ...
                       convY, D+1 ) / ( nsubj - 1 );
        CYdyY = sum( ( convYy - mean( convYy, D+1 ) ) .* ...
                       convY, D+1 ) / ( nsubj - 1 );
                 
        % Entries of Riemanian metric
        g_xx = -CYdxY.^2 ./ VY.^2 + VdxY ./ VY;
        g_yy = -CYdyY.^2 ./ VY.^2 + VdyY ./ VY;
        g_xy = -CYdyY .* CYdxY ./ VY.^2 + CdxYdyY ./ VY;
        
        % Prepare output
        Lambda_est( index{:}, 1, 1 ) = g_xx;
        Lambda_est( index{:}, 1, 2 ) = g_xy;
        Lambda_est( index{:}, 2, 1 ) = g_xy;
        Lambda_est( index{:}, 2, 2 ) = g_yy;
        
    case 3
        % Rename the partial derivatives of the convolution field
        convYx = squeeze( DconvY( index{:}, :, 1 ) );
        convYy = squeeze( DconvY( index{:}, :, 2 ) );
        convYz = squeeze( DconvY( index{:}, :, 3 ) );
        clear DconvY
        
        % Get the estimates of the covariances
        VY   = var( convY,  0, D+1 );
        VdxY = var( convYx, 0, D+1 );
        VdyY = var( convYy, 0, D+1 );
%         VdzY = var( convYy, 0, D+1 );
        VdzY = var( convYz, 0, D+1 );
        
        CdxYdyY = sum( ( convYy - mean( convYy, D+1 ) ) .* ...
                       ( convYx - mean( convYx, D+1 ) ), D+1 ) / (nsubj-1);
        CdxYdzY = sum( ( convYx - mean( convYx, D+1 ) ) .* ...
                       ( convYz - mean( convYz, D+1 ) ), D+1 ) / (nsubj-1);
        CdyYdzY = sum( ( convYy - mean( convYy, D+1 ) ) .* ...
                       ( convYz - mean( convYz, D+1 ) ), D+1 ) / (nsubj-1);

        CYdxY = sum( ( convYx - mean( convYx, D+1 ) ) .* ...
                     ( convY  - mean( convY,  D+1 ) ), D+1 ) / (nsubj-1);
        CYdyY = sum( ( convYy - mean( convYy, D+1 ) ) .* ...
                     ( convY  - mean( convY,  D+1 ) ), D+1 ) / (nsubj-1);
        CYdzY = sum( ( convYz - mean( convYz, D+1 ) ) .* ...
                     ( convY  - mean( convY,  D+1 ) ), D+1 ) / (nsubj-1);
                 
        % Entries of riemanian metric/ Lambda matrix from neuroimaging
        g_xx = ( -CYdxY.^2 + VdxY .* VY ) ./ VY.^2;
        g_yy = ( -CYdyY.^2 + VdyY .* VY ) ./ VY.^2;
        g_zz = ( -CYdzY.^2 + VdzY .* VY ) ./ VY.^2;
        g_xy = ( -CYdyY .* CYdxY + CdxYdyY .* VY ) ./ VY.^2;
        g_xz = ( -CYdzY .* CYdxY + CdxYdzY .* VY ) ./ VY.^2;
        g_yz = ( -CYdzY .* CYdyY + CdyYdzY .* VY ) ./ VY.^2;
        
        % Prepare output
        Lambda_est( index{:}, 1, 1 ) = g_xx;
        Lambda_est( index{:}, 1, 2 ) = g_xy;
        Lambda_est( index{:}, 1, 3 ) = g_xz;
        Lambda_est( index{:}, 2, 1 ) = g_xy;
        Lambda_est( index{:}, 2, 2 ) = g_yy;
        Lambda_est( index{:}, 2, 3 ) = g_yz;
        Lambda_est( index{:}, 3, 1 ) = g_xz;
        Lambda_est( index{:}, 3, 2 ) = g_yz;
        Lambda_est( index{:}, 3, 3 ) = g_zz;
        
end
%%%%%% END compute the Riemannian metric

% Remove NaNs and replace with zero
Lambda_est = nan2zero( Lambda_est );

return