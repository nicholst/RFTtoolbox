function spfn = get_sample_fields( RSfolder, do_gaussianize, mask )
% GET_SAMPLES_FIELDS( data, do_gaussianize, mask ) obtains a function that 
% generates fields from data.
%--------------------------------------------------------------------------
% ARGUMENTS
% Mandatory
%  RSfolder     the name of the resting state set of data that is being
%               worked with 
% Optional
%  do_gaussianize  0/1 whether or not to Gaussianize the data. Default is 1
%                  i.e. to perform Gaussianization.
%  mask         the mask for the data. If this is an array then it is taken
%               to be the mask for the data. If is it not specified then
%               the masks are obtained from the corresponding directory
%--------------------------------------------------------------------------
% OUTPUT
%  spfn         a sample function
%--------------------------------------------------------------------------
% EXAMPLES
% %% %% 1D Examples
% %% Simple 1D example
% tot_nsubj = 30; nvox = 100; data = normrnd(0,1,nvox, tot_nsubj); 
% mask = true(1,nvox)';
% spfn = get_sample_fields( data, mask );
% 
% %% %% 2D Examples
% %% Simple 2D example
% tot_nsubj = 50; Dim = [20,30]; data = normrnd(0,1,[Dim,tot_nsubj]); 
% mask = true(Dim);
% spfn = get_sample_fields( data, mask );
% spfn(20).lat_data
%
% %% Resting State Data example
% mask = imgload('MNImask');
% spfn = get_sample_fields( 'RS_2Block', mask );
% a = spfn(20)
%
% directory =
% '/vols/Scratch/ukbiobank/nichols/SelectiveInf/feat_runs/RS_2Block_warped/'
%--------------------------------------------------------------------------
% AUTHOR: Samuel Davenport
%--------------------------------------------------------------------------

%%  Check mandatory input and get important constants
%--------------------------------------------------------------------------
% Ensure the mask is logical
mask = logical(mask);
D = length(size(mask));

%%  Add/check optional values
%--------------------------------------------------------------------------
% Set the default with_rep value
if ~exist('with_rep', 'var')
   with_rep = 0; 
end

if ~exist('do_gaussianize', 'var')
    do_gaussianize = 1;
end

%%  Main Function Loop
%--------------------------------------------------------------------------
if isnumeric(RSfolder)
    % Index for multidimensional coding
    indexD = repmat( {':'}, 1, D );
    
    % Obtain the size of the data
    sD = size(RSfolder);
    
    % Obtain the total number of subjects
    total_nsubj = sD(end);
    
    % Obtain the sample function
    if isequal(size(RSfolder), size(mask))
        spfn = @(nsubj) get_sample_fields_mate_varmask(RSfolder, mask, nsubj, with_rep, total_nsubj, D, indexD);
    else
        spfn = @(nsubj) get_sample_fields_mate(RSfolder, mask, nsubj, with_rep, total_nsubj, D, indexD, do_gaussianize);
    end
 
elseif ischar(RSfolder)
    % Obtain the sample function. Note that if subset is 1 number then it
    % generates a field with a random selected number of subjects
    % corresponding to this number. If instead subset is a vector then it
    % chooses the subjects according to the ones specified in that vector!
    if ischar(mask)
        spfn = @(subset) get_sample_fields_nifti_intersect(subset, do_gaussianize);
    else
        spfn = @(subset) get_sample_fields_nifti(subset, do_gaussianize, mask);
    end

    % Old var mask code:
    % Obtain the sample function
%     if isstr(mask_dir)
%         error('Need to load in the right masks for this!');
%         spfn = @(nsubj) get_sample_fields_nifti_varmask(directory, ...
%              nifti_file_locs, use_nif, mask_dir, nsubj, with_rep, total_nsubj);
%     else
%     end
else
    error('Other situations have not been coded yet')
end

end
% (RSfolder, mask, nsubj, with_rep, total_nsubj, D, indexD, do_gaussianize)
% Function to obtain a subset field
function lat_data = get_sample_fields_mate(subset2use, data, do_gaussianize, mask, index, D, total_nsubj,  )
    if length(subset2use) == 1
        % Choose a random subset without replacement
        subset = randsample(total_nsubj,subset2use,0);
    end
    index{D+1} = subset2use;
    lat_data = Field(mask);
    lat_data.field = data(index{:});
    if do_gaussianize
        lat_data = Gaussianize(lat_data);
    end
end

% Function to obtain a subset field with variable masks
function out = get_sample_fields_mate_varmask(data, mask_data, nsubj, with_rep, total_nsubj, D, index)
    out.subset = randsample(total_nsubj,nsubj,with_rep);
    index{D+1} = out.subset;
    mask = logical(prod(mask_data(index{:}), D+1));
    out.lat_data = Field(mask);
    out.lat_data.field = data(index{:});
end

% Function to obtain a subset field form nifti file locations
function lat_data = get_sample_fields_nifti(subset2use, do_gaussianize, mask)
    if length(subset2use) == 1
        subset2use = {subset2use};
    end
    drawset = 'cope';
    lat_data = loadUKB( subset2use, RSfolder, 'cope', drawset, mask );
    if do_gaussianize
        lat_data = Gaussianize(lat_data);
    end
end

% Function to draw a given subset with the intersection mask!
function lat_data = get_sample_fields_nifti_intersect(subset2use, do_gaussianize)
    if length(subset2use) == 1
        error('Not set up for random subject selection or nsubj = 1');
    end
    drawset = 'copemask';
    mask_fields = loadUKB( subset2use, RSfolder, 'mask', drawset, ones([91,109,91]));
    
    % Obtain the intersection mask by taking the product of the individual
    % subject masks
    intersection_mask = prod(mask_fields.field,4);
    
    % Obtain the lattice data (including bounding the mask
    lat_data = loadUKB( subset2use, RSfolder, 'cope', drawset, intersection_mask);
    if do_gaussianize
        lat_data = Gaussianize(lat_data);
    end
end

% Function to obtain a subset field form nifti file locations
% function out = get_sample_fields_nifti(subset2use, do_gaussianize)
%     if length(subset2use) == 1
%         subset2use = {subset2use};
%     end
%     [ lat_data, subj_ids, subset ] = loadUKB( subset2use, RSfolder, 'cope' );
%     if do_gaussianize
%         out.lat_data = Gaussianize(lat_data);
%     else
%         out.lat_data = lat_data;
%     end
%     out.subset = subset;
%     out.subj_ids = subj_ids;
% end

% function out = get_sample_fields_nifti_varmask(directory, nifti_file_locs, use_nif, mask_dir, nsubj, with_rep, total_nsubj)
%     out.subset = randsample(total_nsubj,nsubj,with_rep);
%     mask = ones([91,109,91]);
%     masks = loadsubs( out.subset, mask_dir, use_nif, mask, as_3D, nifti_file_locs );
%     mask = logical(prod(masks, 4));
%     [ ~, mask ] = mask_bounds( mask );
%     out.lat_data = Field(mask); as_3D = 1;
%     out.lat_data.field = loadsubs( out.subset, directory, use_nif, mask, as_3D, nifti_file_locs );
% end

% function out = get_sample_fields_nifti(directory, nifti_file_locs, use_nif, mask, nsubj, with_rep, total_nsubj)
%     out.subset = randsample(total_nsubj,nsubj,with_rep);
%     out.lat_data = Field(mask); as_3D = 1;
%     out.lat_data.field = loadsubs( out.subset, directory, use_nif, mask, as_3D, nifti_file_locs );
% end
% 
% function out = get_sample_fields_nifti_varmask(directory, nifti_file_locs, use_nif, mask_dir, nsubj, with_rep, total_nsubj)
%     out.subset = randsample(total_nsubj,nsubj,with_rep);
%     mask = ones([91,109,91]);
%     masks = loadsubs( out.subset, mask_dir, use_nif, mask, as_3D, nifti_file_locs );
%     mask = logical(prod(masks, 4));
%     [ ~, mask ] = mask_bounds( mask );
%     out.lat_data = Field(mask); as_3D = 1;
%     out.lat_data.field = loadsubs( out.subset, directory, use_nif, mask, as_3D, nifti_file_locs );
% end
